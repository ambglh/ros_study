// Generated by gencpp from file ghm_action/dowishGoal.msg
// DO NOT EDIT!


#ifndef GHM_ACTION_MESSAGE_DOWISHGOAL_H
#define GHM_ACTION_MESSAGE_DOWISHGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ghm_action
{
template <class ContainerAllocator>
struct dowishGoal_
{
  typedef dowishGoal_<ContainerAllocator> Type;

  dowishGoal_()
    : dishwasher_id(0)  {
    }
  dowishGoal_(const ContainerAllocator& _alloc)
    : dishwasher_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _dishwasher_id_type;
  _dishwasher_id_type dishwasher_id;





  typedef boost::shared_ptr< ::ghm_action::dowishGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ghm_action::dowishGoal_<ContainerAllocator> const> ConstPtr;

}; // struct dowishGoal_

typedef ::ghm_action::dowishGoal_<std::allocator<void> > dowishGoal;

typedef boost::shared_ptr< ::ghm_action::dowishGoal > dowishGoalPtr;
typedef boost::shared_ptr< ::ghm_action::dowishGoal const> dowishGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ghm_action::dowishGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ghm_action::dowishGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ghm_action::dowishGoal_<ContainerAllocator1> & lhs, const ::ghm_action::dowishGoal_<ContainerAllocator2> & rhs)
{
  return lhs.dishwasher_id == rhs.dishwasher_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ghm_action::dowishGoal_<ContainerAllocator1> & lhs, const ::ghm_action::dowishGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ghm_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ghm_action::dowishGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ghm_action::dowishGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ghm_action::dowishGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ghm_action::dowishGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ghm_action::dowishGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ghm_action::dowishGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ghm_action::dowishGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4757b44b198f8f290eb8a424780d97c";
  }

  static const char* value(const ::ghm_action::dowishGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4757b44b198f8f2ULL;
  static const uint64_t static_value2 = 0x90eb8a424780d97cULL;
};

template<class ContainerAllocator>
struct DataType< ::ghm_action::dowishGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ghm_action/dowishGoal";
  }

  static const char* value(const ::ghm_action::dowishGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ghm_action::dowishGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# 定义目标值\n"
"int32 dishwasher_id\n"
;
  }

  static const char* value(const ::ghm_action::dowishGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ghm_action::dowishGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dishwasher_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dowishGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ghm_action::dowishGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ghm_action::dowishGoal_<ContainerAllocator>& v)
  {
    s << indent << "dishwasher_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dishwasher_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GHM_ACTION_MESSAGE_DOWISHGOAL_H
